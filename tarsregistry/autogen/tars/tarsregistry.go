// Package tars comment
// This file was generated by tars2go 1.1.4
// Generated from tarsregistry.tars
package tars

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// AdapterConf struct implement
type AdapterConf struct {
	Servant      string `json:"servant"`
	Endpoint     string `json:"endpoint"`
	Protocol     string `json:"protocol"`
	MaxConns     int32  `json:"maxConns"`
	ThreadNum    int32  `json:"threadNum"`
	QueueCap     int32  `json:"queueCap"`
	QueueTimeout int32  `json:"queueTimeout"`
}

func (st *AdapterConf) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *AdapterConf) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Servant, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Endpoint, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Protocol, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.MaxConns, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ThreadNum, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.QueueCap, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.QueueTimeout, 6, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *AdapterConf) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AdapterConf, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *AdapterConf) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Servant, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Endpoint, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Protocol, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.MaxConns, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ThreadNum, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.QueueCap, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.QueueTimeout, 6)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *AdapterConf) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// OnStartupReq struct implement
type OnStartupReq struct {
	NodeName    string        `json:"nodeName"`
	Application string        `json:"application"`
	Server      string        `json:"server"`
	SetID       string        `json:"setID"`
	Adapters    []AdapterConf `json:"adapters"`
	DisableFlow bool          `json:"disableFlow"`
	State       string        `json:"State"`
	Version     string        `json:"Version"`
}

func (st *OnStartupReq) ResetDefault() {
	st.State = "active"
}

//ReadFrom reads  from _is and put into struct.
func (st *OnStartupReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.NodeName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Application, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Server, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SetID, 3, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(4, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Adapters = make([]AdapterConf, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.Adapters[i0].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_bool(&st.DisableFlow, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.State, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Version, 7, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *OnStartupReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require OnStartupReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *OnStartupReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.NodeName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Application, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SetID, 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Adapters)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Adapters {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_bool(st.DisableFlow, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.State, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Version, 7)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *OnStartupReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// OnPrestopReq struct implement
type OnPrestopReq struct {
	NodeName string `json:"nodeName"`
}

func (st *OnPrestopReq) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *OnPrestopReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.NodeName, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *OnPrestopReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require OnPrestopReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *OnPrestopReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.NodeName, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *OnPrestopReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// KeepAliveReq struct implement
type KeepAliveReq struct {
	NodeName    string `json:"nodeName"`
	State       string `json:"state"`
	Application string `json:"application"`
	Server      string `json:"server"`
}

func (st *KeepAliveReq) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *KeepAliveReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.NodeName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.State, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Application, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Server, 3, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *KeepAliveReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require KeepAliveReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *KeepAliveReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.NodeName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.State, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Application, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Server, 3)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *KeepAliveReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// RegisterMetricsReq struct implement
type RegisterMetricsReq struct {
	NodeName    string `json:"nodeName"`
	Application string `json:"application"`
	Server      string `json:"server"`
	MetricsPort int32  `json:"metricsPort"`
}

func (st *RegisterMetricsReq) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *RegisterMetricsReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.NodeName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Application, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Server, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.MetricsPort, 3, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *RegisterMetricsReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RegisterMetricsReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *RegisterMetricsReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.NodeName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Application, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.MetricsPort, 3)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *RegisterMetricsReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetMetricsAdaptersReq struct implement
type GetMetricsAdaptersReq struct {
	Filter map[string]string `json:"filter"`
}

func (st *GetMetricsAdaptersReq) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetMetricsAdaptersReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have = _is.SkipTo(codec.MAP, 0, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Filter = make(map[string]string)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 string

			err = _is.Read_string(&k0, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_string(&v0, 1, false)
			if err != nil {
				return err
			}

			st.Filter[k0] = v0
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetMetricsAdaptersReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetMetricsAdaptersReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetMetricsAdaptersReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.MAP, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Filter)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.Filter {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v1, 1)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetMetricsAdaptersReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// MetricsAdapterInfo struct implement
type MetricsAdapterInfo struct {
	Targets []string          `json:"targets"`
	Labels  map[string]string `json:"labels"`
}

func (st *MetricsAdapterInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *MetricsAdapterInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have, ty = _is.SkipToNoCheck(0, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Targets = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_string(&st.Targets[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err, have = _is.SkipTo(codec.MAP, 1, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Labels = make(map[string]string)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {
			var k1 string
			var v1 string

			err = _is.Read_string(&k1, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_string(&v1, 1, false)
			if err != nil {
				return err
			}

			st.Labels[k1] = v1
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *MetricsAdapterInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require MetricsAdapterInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *MetricsAdapterInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Targets)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Targets {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Labels)), 0)
	if err != nil {
		return err
	}

	for k2, v2 := range st.Labels {

		err = _os.Write_string(k2, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v2, 1)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *MetricsAdapterInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
