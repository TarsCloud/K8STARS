//Package Tars comment
// This file war generated by tars2go 1.1
// Generated from tarsregistry.tars
package Tars

import (
	"context"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

//Tarsregistry struct
type Tarsregistry struct {
	s m.Servant
}

//OnStartup is the proxy function for the method defined in the tars file, with the context
func (_obj *Tarsregistry) OnStartup(Req *OnStartupReq, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "onStartup", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return nil
}

//OnStartupWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Tarsregistry) OnStartupWithContext(ctx context.Context, Req *OnStartupReq, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "onStartup", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return nil
}

//OnPrestop is the proxy function for the method defined in the tars file, with the context
func (_obj *Tarsregistry) OnPrestop(Req *OnPrestopReq, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "onPrestop", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return nil
}

//OnPrestopWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Tarsregistry) OnPrestopWithContext(ctx context.Context, Req *OnPrestopReq, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "onPrestop", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return nil
}

//KeepAlive is the proxy function for the method defined in the tars file, with the context
func (_obj *Tarsregistry) KeepAlive(Req *KeepAliveReq, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	ctx := context.Background()
	err = _obj.s.Tars_invoke(ctx, 0, "keepAlive", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return nil
}

//KeepAliveWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *Tarsregistry) KeepAliveWithContext(ctx context.Context, Req *KeepAliveReq, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Req.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	err = _obj.s.Tars_invoke(ctx, 0, "keepAlive", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_obj.setMap(len(_opt), _resp, _context, _status)
	_ = length
	_ = have
	_ = ty
	return nil
}

//SetServant sets servant for the service.
func (_obj *Tarsregistry) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *Tarsregistry) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}
func (_obj *Tarsregistry) setMap(l int, res *requestf.ResponsePacket, ctx map[string]string, sts map[string]string) {
	if l == 1 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
	} else if l == 2 {
		for k, _ := range ctx {
			delete(ctx, k)
		}
		for k, v := range res.Context {
			ctx[k] = v
		}
		for k, _ := range sts {
			delete(sts, k)
		}
		for k, v := range res.Status {
			sts[k] = v
		}
	}
}

//AddServant adds servant  for the service.
func (_obj *Tarsregistry) AddServant(imp _impTarsregistry, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *Tarsregistry) AddServantWithContext(imp _impTarsregistryWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impTarsregistry interface {
	OnStartup(Req *OnStartupReq) (err error)
	OnPrestop(Req *OnPrestopReq) (err error)
	KeepAlive(Req *KeepAliveReq) (err error)
}
type _impTarsregistryWithContext interface {
	OnStartup(ctx context.Context, Req *OnStartupReq) (err error)
	OnPrestop(ctx context.Context, Req *OnPrestopReq) (err error)
	KeepAlive(ctx context.Context, Req *KeepAliveReq) (err error)
}

func onStartup(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Req OnStartupReq
	err = Req.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impTarsregistry)
		err = _imp.OnStartup(&Req)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impTarsregistryWithContext)
		err = _imp.OnStartup(ctx, &Req)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func onPrestop(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Req OnPrestopReq
	err = Req.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impTarsregistry)
		err = _imp.OnPrestop(&Req)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impTarsregistryWithContext)
		err = _imp.OnPrestop(ctx, &Req)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}
func keepAlive(ctx context.Context, _val interface{}, _os *codec.Buffer, _is *codec.Reader, withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	var Req KeepAliveReq
	err = Req.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}
	if withContext == false {
		_imp := _val.(_impTarsregistry)
		err = _imp.KeepAlive(&Req)
		if err != nil {
			return err
		}
	} else {
		_imp := _val.(_impTarsregistryWithContext)
		err = _imp.KeepAlive(ctx, &Req)
		if err != nil {
			return err
		}
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//Dispatch is used to call the server side implemnet for the method defined in the tars file. withContext shows using context or not.
func (_obj *Tarsregistry) Dispatch(ctx context.Context, _val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	_is := codec.NewReader(tools.Int8ToByte(req.SBuffer))
	_os := codec.NewBuffer()
	switch req.SFuncName {
	case "onStartup":
		err := onStartup(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "onPrestop":
		err := onPrestop(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}
	case "keepAlive":
		err := keepAlive(ctx, _val, _os, _is, withContext)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}
