//Package Tars comment
// This file war generated by tars2go 1.1
// Generated from tarsregistry.tars
package Tars

import (
	"fmt"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

//OnStartupReq strcut implement
type OnStartupReq struct {
	NodeName    string        `json:"nodeName"`
	Application string        `json:"application"`
	Server      string        `json:"server"`
	SetID       string        `json:"setID"`
	Adapters    []AdapterConf `json:"adapters"`
	DisableFlow bool          `json:"disableFlow"`
	State       string        `json:"State"`
	Version     string        `json:"Version"`
}

func (st *OnStartupReq) resetDefault() {
	st.State = "active"
}

//ReadFrom reads  from _is and put into struct.
func (st *OnStartupReq) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.resetDefault()

	err = _is.Read_string(&st.NodeName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Application, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Server, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SetID, 3, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(4, false)
	if err != nil {
		return err
	}
	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}
			st.Adapters = make([]AdapterConf, length, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.Adapters[i0].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}
			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}
		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}
		}
	}

	err = _is.Read_bool(&st.DisableFlow, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.State, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Version, 7, false)
	if err != nil {
		return err
	}

	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *OnStartupReq) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.resetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require OnStartupReq, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *OnStartupReq) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.NodeName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Application, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Server, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SetID, 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}
	err = _os.Write_int32(int32(len(st.Adapters)), 0)
	if err != nil {
		return err
	}
	for _, v := range st.Adapters {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}
	}

	err = _os.Write_bool(st.DisableFlow, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.State, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Version, 7)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *OnStartupReq) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
